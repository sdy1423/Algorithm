#include<iostream>
#include<cstring>
#include<vector>
using namespace std;
int r, c, t;
int dx[] = {-1,1,0,0};
int dy[] = {0,0,1,-1};
struct MACHINE {
	int row;
	int col;
};
vector<MACHINE> m;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	cin >> r >> c >> t;
	vector<vector<int>> map1(r, vector<int>(c));
	vector<vector<int>> map2(r, vector<int>(c)); 
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			cin >> map1[i][j];
			if (map1[i][j] == -1) {
				MACHINE machine; machine.row = i; machine.col = j;
				m.push_back(machine);
			}
		}
	}
	int sec = 0;
	while (sec<t) {
		//1초시작
		//확산
		//map1에 있는 정보를 토대로 map2에 확산 시키고 확산 끝나면 map1으로 돌려받는다.
		//map2초기화
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				map2[i][j] = 0;
			}
		}
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) { 
				if (map1[i][j] == -1) {
					map2[i][j] = -1;
					continue; //공기청정기면 스킵
				}
				int nx, ny;
				int dust = map1[i][j]; //확산시킬놈
				int cnt = 0; //확산 방향 수 세기
				
				for (int k = 0; k < 4; k++) {//4방향 탐색
					nx = i + dx[k];
					ny = j + dy[k];
					if (nx < 0 || ny < 0 || nx >= r || ny >= c) continue;//맵벗어나면
					if (map1[nx][ny] == -1) continue; //공기청정기면 패스
			
					map2[nx][ny] = map2[nx][ny]+(dust / 5);
					cnt++;

				}

				//4방향 끝내고 남은양 개산
				map2[i][j] += (dust - (dust / 5 * cnt));
				
			}
		}
		map1 = map2; //확산을 끝냈으면 map1으로 옮긴다. 
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				map2[i][j] = 0;
			}
		}
		//공기청정기 작동
		//1번작동

		//cout << "------------전-----------"<< '\n';
		//for (int i = 0; i < r; i++) {
		//	for (int j = 0; j < c; j++) {
		//		cout << map1[i][j] << ' ';
		//	}
		//	cout << '\n';
		//}
		//cout << "\n";

		vector<vector<bool>> ok(r, vector<bool>(c,false));
		int row = m[0].row;		
		for (int i = 2; i <= c - 1; i++) {
			map2[row][i] = map1[row][i - 1];
			ok[row][i] = true;
			ok[row][i - 1] = true;
		}
		for (int i = row - 1; i >= 0; i--) {
			map2[i][c - 1] = map1[i + 1][c - 1];
			ok[i][c - 1] = true;
			ok[i + 1][c - 1] = true;
		}
		for (int i = c - 2; i >= 0; i--) {
			map2[0][i] = map1[0][i + 1];
			ok[0][i] = true;
			ok[0][i + 1] = true;
		}
		for (int i = 1; i < row; i++) {
			map2[i][0] = map1[i - 1][0];
			ok[i][0] = true;
			ok[i - 1][0] = true;
		}
			//2번작동	
		row = m[1].row;
		for (int i = 2; i <= c - 1; i++) {
			map2[row][i] = map1[row][i - 1];
			ok[row][i] = true;
			ok[row][i - 1] = true;
		}
		for (int i = row + 1; i < r; i++) {
			map2[i][c - 1] = map1[i - 1][c - 1];
			ok[i][c - 1] = true;
			ok[i - 1][c - 1] = true;
		}
		for (int i = c - 2; i >= 0; i--) {
			map2[r - 1][i] = map1[r - 1][i + 1];
			ok[r - 1][i] = true;
			ok[r - 1][i + 1] = true;
		}
		for (int i = r - 2; i > row; i--) {
			map2[i][0] = map1[i + 1][0];
			ok[i][0] = true;
			ok[i + 1][0] = true;
		}
		map2[m[1].row][m[1].col] = -1;
		map2[m[0].row][m[0].col] = -1;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (ok[i][j] == true) {
					map1[i][j] = map2[i][j];
				}
			}
		}

		//cout << "------------후-----------" << '\n';
		//for (int i = 0; i < r; i++) {
		//	for (int j = 0; j < c; j++) {
		//		cout << map1[i][j] << ' ';
		//	}
		//	cout << '\n';
		//}
		//cout << "\n";

		sec++; //1초 추가
	}
	int ans = 0;
	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (map1[i][j] == -1) continue;
			ans += map1[i][j];
		}
	}
	cout << ans << '\n';
	return 0;
}