#include<iostream>
using namespace std;
int n, ans, map[20][20];
bool visited[20][20];
bool check(int x, int y) { //집 범위 체크
	return x < 0 || y < 0 || x >= n || y >= n;
}
bool go_right(int x, int y) { //오른쪽 방향으로 이동 가능여부 체크
	if (check(x, y + 1))return false;
	if (map[x][y + 1])return false;
	return true;
}
bool go_bottom(int x, int y) { //아래쪽 방향으로 이동 가능여부 체크 
	if (check(x + 1, y))return false;
	if (map[x + 1][y])return false;
	return true;
}
bool go_diagonal(int x, int y) { //대각선 아래 방향으로 이동 가능한지 체크
	if (check(x, y + 1))return false;
	if (check(x + 1, y))return false;
	if (check(x + 1, y + 1))return false;
	if (map[x][y + 1])return false;
	if (map[x + 1][y])return false;
	if (map[x + 1][y + 1])return false;
	return true;
}
void Go(int x, int y,int dir) {
	if (x == n - 1 && y == n - 1) {
		ans += 1;
		return;
	}
	switch (dir)
	{
	case 0://가로
		if (go_right(x, y)) {
			visited[x][y + 1] = 1;
			Go(x, y + 1, 0);
			visited[x][y + 1] = 0;
		}
		if (go_diagonal(x, y)) {
			visited[x][y + 1] = 1, visited[x + 1][y] = 1, visited[x + 1][y + 1] = 1;
			Go(x + 1, y + 1, 1);
			visited[x][y + 1] = 0, visited[x + 1][y] = 0, visited[x + 1][y + 1] = 0;
		}
		break;
	case 1://대각선
		if (go_right(x, y)) {
			visited[x][y + 1] = 1;
			Go(x, y + 1, 0);
			visited[x][y + 1] = 0;
		}
		if (go_diagonal(x, y)) {
			visited[x][y + 1] = 1, visited[x + 1][y] = 1, visited[x + 1][y + 1] = 1;
			Go(x + 1, y + 1, 1);
			visited[x][y + 1] = 0, visited[x + 1][y] = 0, visited[x + 1][y + 1] = 0;
		}
		if (go_bottom(x, y)) {
			visited[x + 1][y] = 1;
			Go(x + 1, y, 2);
			visited[x + 1][y] = 0;
		}
		break;
	case 2://세로
		if (go_bottom(x, y)) {
			visited[x + 1][y] = 1;
			Go(x + 1, y, 2);
			visited[x + 1][y] = 0;
		}
		if (go_diagonal(x, y)) {
			visited[x][y + 1] = 1, visited[x + 1][y] = 1, visited[x + 1][y + 1] = 1;
			Go(x + 1, y + 1, 1);
			visited[x][y + 1] = 0, visited[x + 1][y] = 0, visited[x + 1][y + 1] = 0;
		}
		break;
	default:
		break;
	}
}
void Input() {
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	Input();
	visited[0][0] = true;
	visited[0][1] = true;
	Go(0, 1, 0);
	cout << ans << '\n';
	return 0;
}