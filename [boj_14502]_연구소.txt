#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int map[8][8];
int dx[] = { -1,0,0,1 };
int dy[] = { 0,-1,1,0 };
int GapFillCheck(int n, int m) {
	int map2[8][8];
	queue<pair<int, int>> a;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			map2[i][j] = map[i][j]; 
			if (map[i][j] == 2) a.push(make_pair(i, j));
		}
	}
	int x, y;
	int size = a.size();
	for (int i = 0; i < size; i++) {
		queue < pair<int, int>> q;
		q.push(a.front());
		a.pop();
		while (!q.empty()) {
			int x = q.front().first; int y = q.front().second;
			q.pop();
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					int nx = x + dx[k];
					int ny = y + dy[k];
					if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
					if (map2[nx][ny] == 1 || map2[nx][ny] == 2) continue;
					if (map2[nx][ny] == 0) {
						map2[nx][ny] = 1;
						q.push(make_pair(nx, ny));
					}
					else continue;
				}
			}
		}
	}
	int cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (!map2[i][j]) cnt++;
		}
	}
	return cnt;
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
		}
	}
	int ans = 0;
	for (int i = 0; i < n * m; i++) {
		if (!map[i / m][i % m])	map[i / m][i % m] = 1;
		else continue;

		for (int j = 0; j < n * m; j++) {
			if (!map[j / m][j % m])	map[j / m][j % m] = 1;
			else continue;
			if (i == j) continue;

			for (int k = 0; k < n * m; k++) {
				if (!map[k / m][k % m]) map[k / m][k % m] = 1;
				else continue;
				if (k == j || k == i) continue;
				int temp = GapFillCheck(n, m);
				ans = max(temp, ans);

				map[k / m][k % m] = 0;
			}
			map[j / m][j % m] = 0;
		}
		map[i / m][i % m] = 0;
	}
	cout << ans << '\n';
	return 0;
}