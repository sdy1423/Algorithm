#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
bool c;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	int n;
	int sum;
	int ans = -1;
	cin >> n;
	vector<vector <int> > w(n, vector<int>(n,0)); //동적 2차원 배열
	vector<int> d(n);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> w[i][j];
		}
	}
	for (int i = 0; i < n; i++) {
		d[i] = i;
	}
	do {
		if (d[0] != 0) break;
		c = false;
		sum = 0;
		for (int i = 0; i < n-1; i++) {
			if (!w[d[i]][d[i + 1]]) {
				c = true;
				break;
			}
			else {
				sum += w[d[i]][d[i + 1]];
				if (i == n - 2) {
					if (!w[d[i + 1]][d[0]]) {
						c = true;
						break;
					}
					else {
						sum += w[d[i + 1]][d[0]];
					}
				}
			}
		}
		if (!c) {
			if (ans == -1) ans = sum;
			if (sum < ans) ans = sum;
		}		
	} while (next_permutation(d.begin(), d.end()));
	cout << ans << '\n';
	return 0;
}