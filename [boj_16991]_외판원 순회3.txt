#include<iostream>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;
typedef pair<double, double> P;
int n;
double INF = 987654321, dist[1 << 17][17];
vector<P> v;
// 이미 방문한 도시들의 집합이 i, 현재 있는 도시가 j일 때, 방문하지 않은 나머지 도시들을 방문하고 출발 도시로 돌아오는 최소 비용
double distance(P p1, P p2) {
	return sqrt(pow((p2.first - p1.first), 2) + pow((p2.second - p1.second), 2));
}
double tsp(int visit, int now) {
	visit |= (1 << now);
	if (visit == ((1 << n) - 1)) {
		if (dist[visit][now])return dist[visit][now];
		else return dist[visit][now] = distance(v[now], v[0]);
	}
	if (dist[visit][now])return dist[visit][now];
	double rst = INF;
	for (int i = 0; i < n; i++) {
		if (visit & (1 << i))continue;
		rst = min(rst, tsp(visit, i) + distance(v[now], v[i]));
	}
	return dist[visit][now] = rst;
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	cin >> n;
	double x, y;
	for (int i = 0; i < n; i++) {
		cin >> x >> y;
		v.push_back(P(x, y));
	}
	cout << fixed;
	cout.precision(6);
	cout << tsp(0, 0) << '\n';
	return 0;
}