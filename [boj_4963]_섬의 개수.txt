#include<iostream>
#include<queue>
using namespace std;
int a[51][51];
int g[51][51];
int dx[] = { -1,-1,-1,0,0,1,1,1 };
int dy[] = { -1,0,1,-1,1,-1,0 ,1 };
int w, h;
void bfs(int x, int y, int cnt) {
	g[x][y] = cnt;
	queue<pair<int, int>> q;
	q.push(make_pair(x, y));
	while (!q.empty()) {
		x = q.front().first; y = q.front().second; q.pop();
		for (int i = 0; i < 8; i++) {
			int nx = x + dx[i]; int ny = y + dy[i];
			if (nx >= 0 && nx < h && ny >= 0 && ny < w) {
				if (a[nx][ny] == 1 && g[nx][ny] == 0) {
					g[nx][ny] = cnt;
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	while (1) {
		cin >> w >> h;
		if (w == 0 && h == 0) break;
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				cin >> a[i][j];
				g[i][j] = 0;
			}
		}
		int cnt = 0;
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				if (a[i][j] == 1 && g[i][j] == 0) {
					cnt += 1;
					bfs(i, j, cnt);
				}
			}
		}
		cout << cnt << '\n';
	}
	return 0;
}