#include<iostream>
#include<queue>
#include<vector>
using namespace std;
int N, M, T;
struct ROTATE {
	int x, d, k;
}ro[50];
//N:원의 개수, M:각 원당 수의 개수, T:회전시킨 회수

//시계,반시계 방향으로 회전한다.
void ROTATE_MAP(vector<int> &a,int dir,int k) {
	if (dir == 0) {//시계방향
		for (int j = 0; j < k; j++) {
			int temp = a[M - 1];
			for (int i = M - 1; i > 0; i--) {
				a[i] = a[i - 1];
			}
			a[0] = temp;
		}
	}
	else if (dir == 1) {//반시계 방향
		for (int j = 0; j < k; j++) {
			int temp = a[0];
			for (int i = 0; i < M - 1; i++) {
				a[i] = a[i + 1];
			}
			a[M - 1] = temp;
		}
	}
}
const int dx[] = {0,0,-1,1};
const int dy[] = {1,-1,0,0};
bool FIND(vector<vector<int>> &a) { //인접하면서 같은거 찾는다.
	//있으면 지우고 FALSE반환
	//없으면 TRUE반환
	bool ok = true;
	vector<vector<bool>> visited(N, vector<bool>(M, false));
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < 4; k++) {
				if (a[i][j] == -1) continue;
				int nx = i + dx[k];
				int ny = j + dy[k];
				if (nx < 0 || nx >= N) continue;
				if (ny < 0) ny = M - 1;
				else if (ny == M) ny = 0;
				if (a[nx][ny] == -1) continue;
				if (a[i][j] == a[nx][ny]) {
					visited[i][j] = true;
					visited[nx][ny] = true;
					ok = false;
				}
			}
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (visited[i][j] == true) a[i][j] = -1;
		}
	}

	/*cout << "지운 후" << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << a[i][j] << ' ';
		}
		cout << '\n';
	}
	cout << '\n';*/


	return ok;
}
void AVERAGE(vector<vector<int>> &a) { //없으면 원판 수 평균 구하고 +1,-1
	int sum = 0, cnt = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (a[i][j] == -1) continue; //지워진 숫자는 제외
			sum += a[i][j];
			cnt++;
		}
	}
	double av = (double)sum / (double)cnt;
	//cout << av << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (a[i][j] == -1) continue;
			double temp = (double)a[i][j];
			if (temp > av) a[i][j]--;
			else if (temp < av) a[i][j]++;
		}
	}

	/*cout << "평균처리 후" << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << a[i][j] << ' ';
		}
		cout << '\n';
	}
	cout << '\n';*/

}
void COUT_SUM(vector<vector<int>>& a) {
	int ans = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (a[i][j] == -1)continue;
			ans += a[i][j];
		}
	}
	cout << ans << '\n';
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	cin >> N >> M >> T;
	//int map[50][50];
	vector<vector<int>> map(N, vector<int>(M));
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}
	int x, d, k;
	for (int i = 0; i < T; i++) {
		cin >> x >> d >> k;
		ro[i].x = x, ro[i].d = d, ro[i].k = k;
	}
	//시작

	int X, D, K;
	for (int i = 0; i < T; i++) {
		X = ro[i].x, D = ro[i].d, K = ro[i].k;
		//X의 배수는 회전한다.
		for (int j = X; j <= N; j += X) {
			int what = j - 1;
			ROTATE_MAP(map[what],D,K); //회전
		}
		/*cout << "회전끝난 직후" << '\n';
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				cout << map[i][j] << ' ';
			}
			cout << '\n';
		}
		cout << '\n';*/


		//인접하면서 수가 같은 것 찾는다.
		//bool ok;
		//ok = FIND(map);

		if (FIND(map) == true) {
			AVERAGE(map);
		}

		//없으면 평균구해서 +1,-1한다.
		//if (ok) AVERAGE(map);
	}

	/*cout << "다 끝난 후" << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << map[i][j] << ' ';
		}
		cout << '\n';
	}
	cout << '\n';*/


	//수의 합을 출력한다.
	COUT_SUM(map);
	
	return 0;
}