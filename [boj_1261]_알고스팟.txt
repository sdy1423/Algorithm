#include<iostream>
#include<queue>
using namespace std;
int n, m; //m:가로, n:세로
char map[101][101];
int dist[101][101];
int INF = 987654321;
int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,-1,1 };
void BFS() {
	dist[0][0] = 0;
	queue<pair<int, int>> qu;
	qu.push({ 0,0 });
	while (!qu.empty()) {
		int x = qu.front().first;
		int y = qu.front().second;
		qu.pop();
		for (int dir = 0; dir < 4; dir++) {
			int nx = x + dx[dir];
			int ny = y + dy[dir];
			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (map[nx][ny]=='1') {
				if (dist[nx][ny] > dist[x][y] + 1) {
					qu.push({ nx,ny });
					dist[nx][ny] = dist[x][y] + 1;
				}
			}
			else {
				if (dist[nx][ny] > dist[x][y]) {
					qu.push({ nx,ny });
					dist[nx][ny] = dist[x][y];
				}
			}
		}
	}
}
void INPUT() {
	cin >> m >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
			dist[i][j] = INF;
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	INPUT();
	BFS();
	cout << dist[n - 1][m - 1] << '\n';
	return 0;
}