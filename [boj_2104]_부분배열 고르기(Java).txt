package algorithm;
import java.io.*;
import java.util.Scanner;
import java.util.StringTokenizer;


public class Main {
	static int n;
	static long[] arr = new long[100001];
	public static void main(String[] args) throws IOException {
		InputStreamReader isr = new InputStreamReader(System.in);
		BufferedReader br = new BufferedReader(isr);
		OutputStreamWriter osw = new OutputStreamWriter(System.out);
		BufferedWriter bw = new BufferedWriter(osw);
		StringTokenizer st;
		n = Integer.parseInt(br.readLine());
		st = new StringTokenizer(br.readLine());
		for(int i=1;i<=n;i++) {
			arr[i]=Integer.parseInt(st.nextToken());
		}
		long result = find(1,n);
		bw.write(result+"\n");
		bw.close();
		br.close();
	}
	public static long find(int start,int end) {
		if(start==end)return arr[start]*arr[start];
		int mid = (start+end)/2;
		long rst = Math.max(find(start,mid), find(mid+1,end));
		int left=mid,right=mid;
		long sum=arr[mid],min_v=arr[mid];
		rst = Math.max(rst, sum*min_v);
		while(left>start || right<end) {
			if(left>start && right<end) {
				if(arr[left-1]>arr[right+1]) {
					left-=1;
					sum+=arr[left];
					min_v=Math.min(min_v, arr[left]);
				}else {
					right+=1;
					sum+=arr[right];
					min_v=Math.min(min_v, arr[right]);
				}
			}else if(left==start && right<end) {
				right+=1;
				sum+=arr[right];
				min_v=Math.min(min_v, arr[right]);
			}else {
				left-=1;
				sum+=arr[left];
				min_v = Math.min(min_v, arr[left]);
			}
			rst = Math.max(rst, sum*min_v);
		}
		return rst;
	}
}

