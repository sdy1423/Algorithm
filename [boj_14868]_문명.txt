#include<iostream>
#include<queue>
#define MAX_V 2001
using namespace std;
typedef pair<int, int> P;
int N, K, X, Y;
int p[MAX_V * MAX_V]; //부모
int map[MAX_V][MAX_V]; //맵
int cnt; //문명의 개수
int year, dx[] = { -1,1,0,0 }, dy[] = { 0,0,-1,1 };
queue<P> spread_q, merge_q;
bool canMove(int x, int y) {
	return (x < 0 || y < 0 || x >= N || y >= N);//범위를 벗어나면 1
}
int find(int n) {
	if (p[n] == n) return n;
	return p[n] = find(p[n]);
}
void merge(int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) return;
	p[b] = a;
}
bool check() {
	int same = -1;
	for (int i = 1; i < cnt; i++) {
		if (same == -1) same = find(p[i]);
		else {
			if (same == find(p[i])) continue;
			else return false;
		}
	}
	return true;
}
void Input() {
	cin >> N >> K;
	cnt = 1;
	fill(p, p + MAX_V * MAX_V, -1);
	int x, y, nx, ny;
	year = 0;
	for (int i = 0; i < K; i++) {
		cin >> X >> Y;
		x = N - Y, y = X - 1;
		map[x][y] = cnt;
		p[cnt] = cnt;
		spread_q.push(P(x, y));
		for (int dir = 0; dir < 4; dir++) {
			nx = x + dx[dir], ny = y + dy[dir];
			if (canMove(nx, ny)) continue;
			if (map[nx][ny] > 0) {
				//합쳐
				merge(map[x][y], map[nx][ny]);
			}
		}
		cnt += 1;
	}
}
void Merge_bfs() {
	int x, y, nx, ny;
	while (!merge_q.empty()) {
		x = merge_q.front().first;
		y = merge_q.front().second;
		merge_q.pop();
		spread_q.push(P(x, y));
		for (int dir = 0; dir < 4; dir++) {
			nx = x + dx[dir], ny = y + dy[dir];
			if (canMove(nx, ny)) continue;
			if (map[nx][ny] && map[nx][ny]!=map[x][y]) {
				merge(map[x][y], map[nx][ny]);
			}
		}
	}
}
void Spread_bfs() {
	int x, y, nx, ny;
	while (!spread_q.empty()) {
		x = spread_q.front().first;
		y = spread_q.front().second;
		spread_q.pop();
		for (int dir = 0; dir < 4; dir++) {
			nx = x + dx[dir], ny = y + dy[dir];
			if (canMove(nx, ny))continue;
			if (!map[nx][ny]) {
				merge_q.push(P(nx, ny));
				map[nx][ny] = map[x][y];
			}
		}
	}
}
void Sol() {
	while (1) {
		if (check())break;
		year++;
		Spread_bfs();
		Merge_bfs();
	}
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	Input();
	Sol();
	cout << year << '\n';
	return 0;
}