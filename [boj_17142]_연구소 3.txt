#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;
int N, M;
int map[50][50];
int ans = -1;
const int dx[] = {0,0,-1,1};
const int dy[] = {-1,1,0,0};

struct VIRUS {
	int r, c;
};
VIRUS virus;
vector<VIRUS> v; //v의 size = 바이러스 개수 (활성,비활성 여부는 아직 모른다)
bool INPUT() {
	cin >> N >> M;
	bool ok = false; //빈칸이 없으면 바로 끝내

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2) {
				virus.r = i, virus.c = j;
				v.push_back(virus);
			}
			if (map[i][j] == 0) ok = true;
		}
	}
	return ok;
}
void bfs(vector<vector<bool>>& visited, vector<vector<int>>& spread, queue<VIRUS>& q) {
	//map[i][j]가 2고 방문 안했으면 비활성 바이러스다. 
	//(활성화 한다 = q에 넣고 , visited=true;

	while (!q.empty()) {
		int x = q.front().r;
		int y = q.front().c;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			//범위를 벗어나면 패스
			if (nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
			//벽이면 패스
			if (map[nx][ny] == 1) continue;
			//비활성 바이러스를 만날경우 활성화
			if (map[nx][ny] == 2 && visited[nx][ny] == false) {
				visited[nx][ny] = true;
				spread[nx][ny] = spread[x][y] + 1;
				VIRUS next;
				next.r = nx, next.c = ny;
				q.push(next);
			}
			//빈칸을 만날경우
			if (map[nx][ny] == 0 && visited[nx][ny] == false) {
				visited[nx][ny] = true;
				spread[nx][ny] = spread[x][y] + 1; //걸린 시간을 적는다. 
				VIRUS next;
				next.r = nx, next.c = ny;
				q.push(next);
			}
		}

	}

}
void check(vector<vector<bool>>& visited, vector<vector<int>>& spread) {
	int cnt = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 2) continue;//바이러스면 패스
			else if (map[i][j] == 1) continue;//벽도 패스
			//바이러스가 퍼지지 않았다(방문하지 않았다)
			if (spread[i][j] == 0 && visited[i][j] == false) {
				return; //돌아가서 continue;
			}
			cnt = max(cnt, spread[i][j]);
		}
	}
	if (ans == -1) ans = cnt;
	else ans = min(ans, cnt);
	return;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	bool ok = INPUT();
	if (ok == false) {
		cout << 0 << '\n';
		return 0;
	}
	
	//조합을 위한 벡터 만들기(1이 M개)
	int size = v.size();
	vector<int> combi(size,0);
	for (int i = 0; i < M; i++) {
		combi[i] = 1;
	}
	sort(combi.begin(), combi.end());
	
	do {
		vector<vector<bool>> visited(N, vector<bool>(N, false));
		vector<vector<int>> spread(N, vector<int>(N, 0));
		queue<VIRUS> q; //활성화된 바이러스만 담는다. 
		int size = combi.size();
		for (int i = 0; i < size; i++) {
			if (combi[i] == 1) {
				q.push(v[i]);
				visited[v[i].r][v[i].c] = true; //활성바이러스는 방문했다.
			}
		}

		bfs(visited,spread,q);

	
		/*for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				cout << spread[i][j] << ' ';
			}
			cout << '\n';
		}
		cout << '\n';
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				cout << visited[i][j] << ' ';
			}
			cout << '\n';
		}
		cout << '\n';*/



		//빈칸이 없을경우(!ok) ans=min(spread최대값,ans), 빈칸이 있을경우(ok) continue;
		check(visited,spread);
		

		//cout << "ans: " << ans << '\n';

	} while (next_permutation(combi.begin(), combi.end()));
	cout << ans << '\n';
	return 0;
}