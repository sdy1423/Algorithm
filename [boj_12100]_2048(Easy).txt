#include <iostream>
#include <cassert>
#include <vector>
#include <string>
using namespace std;
const int LIMIT = 5;
int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };
vector<int> gen(int k) {
	vector<int> a(LIMIT);
	for (int i = 0; i < LIMIT; i++) {
		a[i] = ( k & 3 ); // == k%4
		k >>= 2; // == k/4
	}
	return a;
}
int check(vector<vector<int>> &map, vector<int> &dirs) {
	int n = map.size();
	vector<vector<pair<int, bool>>> a(n, vector<pair<int, bool>>(n));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			a[i][j].first = map[i][j];
		}
	}
	for (int dir:dirs) {
		bool ok = false;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				a[i][j].second = false;
			} 
		}
		while (true) {
			ok = false;
			if (dir == 0) {
				for (int i = n - 2; i >= 0; i--) {
					for (int j = 0; j < n; j++) {
						if (a[i][j].first == 0) continue;
						if (a[i + 1][j].first == 0) {
							a[i + 1][j].first = a[i][j].first;
							a[i + 1][j].second = a[i][j].second;
							a[i][j].first = 0;
							ok = true;
						}
						else if (a[i + 1][j].first == a[i][j].first) {
							if (a[i + 1][j].second == false && a[i][j].second == false) {
								a[i + 1][j].second = true;
								a[i + 1][j].first *= 2;
								a[i][j].first = 0;
								ok = true;
							}
						}
					}
				}
			}
			else if (dir == 1) {
				for (int i = 1; i < n; i++) {
					for (int j = 0; j < n; j++) {
						if (a[i][j].first == 0) continue;
						if (a[i - 1][j].first == 0) { //바로 위의 칸이 0
							a[i - 1][j].first = a[i][j].first;
							a[i - 1][j].second = a[i][j].second;
							a[i][j].first = 0;
							ok = true;
						}
						else if (a[i - 1][j].first == a[i][j].first) { //바로 위 칸이 같을 경우
							if (a[i][j].second == false && a[i - 1][j].second == false) {
								a[i - 1][j].second = true;
								a[i - 1][j].first *= 2;
								a[i][j].first = 0;
								ok = true;
							}
						}
					}
				}
			}
			else if (dir == 2) {
				for (int j = 1; j < n; j++) {
					for (int i = 0; i < n; i++) {
						if (a[i][j].first == 0) continue;
						if (a[i][j - 1].first == 0) {
							a[i][j - 1].first = a[i][j].first;
							a[i][j - 1].second = a[i][j].second;
							a[i][j].first = 0;
							ok = true;
						}
						else if (a[i][j - 1].first == a[i][j].first) {
							if (a[i][j - 1].second == false && a[i][j].second == false) {
								a[i][j - 1].second = true;
								a[i][j - 1].first *= 2;
								a[i][j].first = 0;
								ok = true;
							}
						}
					}
				}

			}
			else if (dir == 3) {
				for (int j = n - 2; j >= 0; j--) {
					for (int i = 0; i < n; i++) {
						if (a[i][j].first == 0) continue;
						if (a[i][j + 1].first == 0) {
							a[i][j + 1].first = a[i][j].first;
							a[i][j + 1].second = a[i][j].second;
							a[i][j].first = 0;
							ok = true;
						}
						else if (a[i][j + 1].first == a[i][j].first) {
							if (a[i][j + 1].second == false && a[i][j].second == false) {
								a[i][j + 1].second = true;
								a[i][j + 1].first *= 2;
								a[i][j].first = 0;
								ok = true;
							}
						}
					}
				}
			}
			if (ok == false) break;
		}
	}
	int cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (cnt < a[i][j].first) {
				cnt = a[i][j].first;
			}
		}
	}
	return cnt;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);

	int n;
	cin >> n;

	vector<vector<int>> map(n, vector<int>(n));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
		}
	}
	int ans = 0;
	for (int k = 0; k < (1 << (LIMIT * 2)); k++) {
		vector<int> dirs=gen(k);
		int temp = check(map, dirs);
		if (ans < temp) ans = temp;
	}
	cout << ans << '\n';
	return 0;
}