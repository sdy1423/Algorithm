#include<string>
#include<vector>
#include<stack>
#include<iostream>
#include<algorithm>
using namespace std;
int solution(vector<vector<int>> board, vector<int> moves) {
    int ans = 0, row = board.size(), picked;
    stack<int> st;
    for (int i = 0; i < moves.size(); i++) {
        for (int j = 0; j < row; j++) {
            picked = board[j][moves[i] - 1];
            if (!picked) continue;
            else {
                if (st.empty()) {
                    st.push(picked);
                }
                else {
                    if (st.top() == picked) {
                        st.pop();
                        ans += 2;
                    }
                    else {
                        st.push(picked);
                    }
                }
                board[j][moves[i] - 1] = 0;
                break;
            }
        }
        //for (int x = 0; x < 5; x++) {
        //    for (int y = 0; y < 5; y++) {
        //        cout << board[x][y] << ' ';
        //    }
        //    cout << '\n';
        //}
        //cout << '\n';
    }
    return ans;
}

int main() {
    vector<vector<int>> board;
    board.push_back({ 0,0,0,0,0 });
    board.push_back({ 0,0,1,0,3 });
    board.push_back({ 0,2,5,0,1 });
    board.push_back({ 4,2,4,4,2 });
    board.push_back({ 3,5,1,3,1 });
    vector<int> moves;
    moves.push_back(1);
    moves.push_back(5);
    moves.push_back(3);
    moves.push_back(5);
    moves.push_back(1);
    moves.push_back(2);
    moves.push_back(1);
    moves.push_back(4);
    cout << solution(board, moves) << '\n';
    return 0;
}