#include<iostream>
#include<algorithm>
using namespace std;
int n, m;
int map[6][6];
bool v[5][5]; 
int ans = -1;
int dx1[] = { -1,-1,0,0 };
int dy1[] = { 0,0,1,-1 };
int dx2[] = { 0,0,1,1 };
int dy2[] = { -1,1,0,0 };
bool check(int r, int c) { //벗어나면 1
	return r < 0 || c < 0 || r >= n || c >= m;
}
void go(int x, int y,int sum) {
	if (x == n - 1 && y == m) {
		ans = max(ans, sum);
		return;
	}
	int nx, nx1, nx2, ny, ny1, ny2;
	for (int dir = 0; dir < 4; dir++) {
		nx1 = x + dx1[dir], ny1 = y + dy1[dir], nx2 = x + dx2[dir], ny2 = y + dy2[dir];
		if (!check(nx1, ny1) && !check(nx2, ny2)) {//범위 체크
			if (!v[x][y] && !v[nx1][ny1] && !v[nx2][ny2]) {
				v[x][y] = 1, v[nx1][ny1] = 1, v[nx2][ny2] = 1;
				int tmp = map[x][y] * 2 + map[nx1][ny1] + map[nx2][ny2];
				if (y < m - 1) nx = x, ny = y + 1;
				else if (y == m - 1 && x < n - 1)nx = x + 1, ny = 0;
				else if (y == m - 1 && x == n - 1)nx = x, ny = y + 1;
				go(nx, ny, sum + tmp);
				v[x][y] = 0, v[nx1][ny1] = 0, v[nx2][ny2] = 0;
			}
		}
	}
	if (y < m - 1) nx = x, ny = y + 1;
	else if (y == m - 1 && x < n - 1)nx = x + 1, ny = 0;
	else if (y == m - 1 && x == n - 1)nx = x, ny = y + 1;
	go(nx, ny, sum);
}
void Input() {
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	Input();
	go(0, 0, 0);
	cout << ans << '\n';
	return 0;
}