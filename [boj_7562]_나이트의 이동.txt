#include<cstring>
#include<iostream>
#include<queue>
using namespace std;

int arr[301][301];
int score[301][301];
bool visited[301][301];
queue<pair<int, int>> qu;
int dx[] = {-2,-2,-1,-1,1,1,2,2};
int dy[] = {-1,1,-2,2,-2,2,-1,1};

void bfs(int _n,pair<int, int> _from, pair<int, int> _to) {
	memset(visited, false, sizeof(visited));
	memset(score, 0, sizeof(score));
	qu.push(_from);
	visited[_from.first][_from.second] = true;
	pair<int, int> curr;
	while (!qu.empty()) {
		int qSize = qu.size();
		for (int ii = 0; ii < qSize; ii++) {
			curr = qu.front(); qu.pop();
			for (int i = 0; i < 8; i++) {
				int nx = curr.first + dx[i];
				int ny = curr.second + dy[i];
				if (nx >= 0 && ny >= 0 && nx < _n && ny < _n) {
					if (visited[nx][ny] == false) {
						qu.push(make_pair(nx, ny));
						visited[nx][ny] = true;
						score[nx][ny] = score[curr.first][curr.second] + 1;
						//if (nx == _to.first && ny == _to.second) return;
					}
				}
			}
		}
	}
	return;
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	int t,n,x,y,xx,yy;
	pair<int, int> from;
	pair<int, int> to;
	cin >> t;
	while (t--) {
		cin >> n;
		cin >> x >> y >> xx >> yy;
		from = make_pair(x, y);
		to = make_pair(xx, yy);
		bfs(n,from, to);
		cout << score[to.first][to.second]<<'\n';
	}
	return 0;
}