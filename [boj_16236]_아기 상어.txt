#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
int map[21][21];
int dis[21][21];
bool flag;

int n;
int shark_eat;
int shark_size = 2;
int shark_time;

int dx[] = { -1,0,0,1 };
int dy[] = { 0,-1,1,0 };

struct SHARK {
	int i;
	int j;
};
SHARK shark;
queue<SHARK> qu;
void solution() {
	flag = true;
	while (flag) {
		flag = false;
		memset(dis, 0, sizeof(dis));
		qu.push(shark);
		while (!qu.empty()) {
			SHARK cur = qu.front(); qu.pop();
			for (int i = 0; i < 4; i++) {
				SHARK next; next.i = cur.i + dx[i]; next.j = cur.j + dy[i];
				if (next.i < 0 || next.j < 0 || next.i >= n || next.j >= n) continue;
				if (map[next.i][next.j] <= shark_size && dis[next.i][next.j] == 0) {
					qu.push(next);
					dis[next.i][next.j] = dis[cur.i][cur.j] + 1;
				}
			}
		}
		int min = 9999999999;
		SHARK candi;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (dis[i][j]!=0 && map[i][j] < shark_size && map[i][j] != 0) {
					if (dis[i][j] < min) {
						min = dis[i][j]; candi.i = i; candi.j = j;flag = true;
					}
					else if (dis[i][j] == min) {
						if (i < candi.i) {
							min = dis[i][j]; candi.i = i; candi.j = j; flag = true;
						}
						else if (i == candi.i) {
							if (j < candi.j) {
								min = dis[i][j]; candi.i; candi.j = j; flag = true;
							}
						}
					}
				}
			}
		}
		if (flag == true) {
			shark_time += dis[candi.i][candi.j];
			shark_eat++;
			if (shark_eat == shark_size) {
				shark_size++;
				shark_eat = 0;
			}
			map[candi.i][candi.j] = 0;
			shark = candi;
		}
	}
	return;
}
int main() {
	//freopen("input.txt", "r", stdin);
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
			if (map[i][j] == 9) {
				shark.i = i; shark.j = j; map[i][j] = 0;
			}
		}
	}
	solution();
	cout << shark_time << '\n';
	return 0;
}