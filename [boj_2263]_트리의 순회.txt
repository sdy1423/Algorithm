#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int n;
vector<int> in_order, post_order;
void Tree(int in_s,int in_e,int post_s,int post_e) {
	if (in_s > in_e || post_s > post_e)return;
	if (post_s==post_e) {
		cout << post_order[post_s] << ' ';
		return;
	}
	int last = post_order[post_e];
	cout << last << ' ';	
	int length = find(in_order.begin(), in_order.end(), last) - in_order.begin() - in_s;
	Tree(in_s, in_s + length - 1, post_s, post_s + length - 1);
	Tree(in_s + length + 1, in_e, post_s + length, post_e - 1);
}
int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	cin >> n;
	in_order.resize(n), post_order.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> in_order[i];
	}
	for (int i = 0; i < n; i++) {
		cin >> post_order[i];
	}
	Tree(0, n - 1, 0, n - 1);
	return 0;
}