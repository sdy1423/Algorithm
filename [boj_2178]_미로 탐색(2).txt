#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;
bool visited[101][101];
int ans[101][101];
int dx[] = { -1,0,0,1 };
int dy[] = { 0,-1,1,0 };
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
	int n, m;
	cin >> n >> m;
	vector<string> arr;
	arr.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> arr[i];
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == '0') visited[i][j] = true;
		}
	}
	pair<int, int> curr;
	pair<int, int> next;
	queue<pair<int, int>> qu;
	qu.push(make_pair(0, 0));
	visited[0][0] = true;
	ans[0][0] = 1;
	while (!qu.empty()) {
		curr = qu.front();
		qu.pop();
		for (int i = 0; i < 4; i++) {
			int nx = curr.first + dx[i];
			int ny = curr.second + dy[i];
			if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
				if (visited[nx][ny] == false) {
					visited[nx][ny] = true;
					qu.push(make_pair(nx, ny));
					ans[nx][ny] = ans[curr.first][curr.second]+1 ;
				}
			}
		}
	}
	cout << ans[n - 1][m - 1] << '\n';
	return 0;
}