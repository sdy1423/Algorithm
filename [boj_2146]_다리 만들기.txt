#include<iostream>
#include<queue>
#include<algorithm>
#include<vector>
using namespace std;
int N;
int map[101][101];
bool visited[101][101];
bool checked[10001];
const int dx[] = {-1,1,0,0};
const int dy[] = {0,0,-1,1};
int color = 0;
vector<pair<int,int>> picked;
vector<pair<int, int>> p;
int ans = 987654321;

void bfs(int i, int j) {
	visited[i][j] = true;
	queue<pair<int, int>> q;
	q.push(make_pair(i, j));
	color++;
	map[i][j] = color;

	int x, y, nx, ny;
	while (!q.empty()) {
		x = q.front().first;
		y = q.front().second;
		q.pop();
		for (int dir = 0; dir < 4; dir++) {
			nx = x + dx[dir];
			ny = y + dy[dir];
			if (nx < 0 || ny < 0 || nx >= N || ny >= N) continue;
			if (map[nx][ny] == 0) picked.push_back(make_pair(x, y));
			if (visited[nx][ny] == false && map[nx][ny] != 0) {
				visited[nx][ny] = true;
				map[nx][ny] = color;
				q.push(make_pair(nx, ny));
			}
		}
	}
}
void combination(int idx, int toPick) {
	if (toPick == 0) {
		int x1, x2, y1, y2;
		x1 = p[0].first;
		y1 = p[0].second;

		x2 = p[1].first;
		y2 = p[1].second;

		//다른 대륙 도착
		if (map[x1][y1] != map[x2][y2]) {
			int dist = abs(x1 - x2) + abs(y1 - y2) - 1;
			ans = min(dist, ans);
		}
		return;
	}
	for (int i = idx; i < picked.size(); i++) {
		if (!checked[i]) {
			checked[i] = true;
			p.push_back(picked[i]);
			combination(idx, toPick-1);
			checked[i] = false;
			p.pop_back();
		}
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);

	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j] == 1 && visited[i][j]==false) {
				bfs(i, j);
			}
		}
	}

	//해안가 중복 제거
	sort(picked.begin(), picked.end());
	picked.erase(unique(picked.begin(), picked.end()), picked.end());

	combination(0, 2);
	cout << ans << '\n';

	return 0;
}