#include<iostream>
#include<vector>
#include<algorithm>
#define MAX_V 100001
using namespace std;
int parent[MAX_V];
int n, m, a, b, c; //집의 개수, 길의 개수
vector<pair<int, pair<int, int>>> graph;
int ans;
int find(int n) {
	if (parent[n] == 0)return n;
	return parent[n] = find(parent[n]);
}
void merge(int a, int b) {
	a = find(a);
	b = find(b);
	if (a == b) return;
	parent[b] = a;
}
void Sol() {
	int cnt = 0, tmp = 0;
	for (int i = 0; i < graph.size(); i++) {
		if (cnt == n - 1)break;
		a = graph[i].second.first;
		b = graph[i].second.second;
		if (find(a) == find(b))continue;
		cnt++;
		ans += graph[i].first;
		merge(a, b);
		if (cnt == n - 1) tmp = graph[i].first;
	}
	ans -= tmp;
	cout << ans << '\n';
}
void Input() {
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		cin >> a >> b >> c; // a-b 유지비 c
		graph.push_back({ c, { a,b } });
	}
	sort(graph.begin(), graph.end());
}
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr); cout.tie(nullptr);
	Input();
	Sol();
	return 0;
}